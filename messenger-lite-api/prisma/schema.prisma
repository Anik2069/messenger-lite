generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String                    @id @default(uuid())
  username               String                    @unique
  email                  String                    @unique
  password               String
  avatar                 String?
  isOnline               Boolean                   @default(false)
  createdAt              DateTime                  @default(now())
  lastSeenAt             DateTime?
  updatedAt              DateTime                  @updatedAt
  failed2FAAttempts      Int                       @default(0)
  isTwoFAEnable          Boolean                   @default(false)
  lockedUntil            DateTime?
  twoFASecret            String?
  participants           ConversationParticipant[]
  receivedFriendRequests FriendRequest[]           @relation("ReceivedFriendRequests")
  sentFriendRequests     FriendRequest[]           @relation("SentFriendRequests")
  messages               Message[]                 @relation("MessageAuthor")
  reactions              MessageReaction[]
  reads                  MessageRead[]
  UserDevice             UserDevice[]
  settings               UserSettings?
}

model UserDevice {
  id          String      @id @default(cuid())
  ip_address  String
  os          String
  browser     String
  device_type device_type
  user_agent  String
  last_active DateTime
  user_id     String
  trusted     Boolean     @default(false)
  User        User        @relation(fields: [user_id], references: [id])

  @@index([user_id])
}

model FriendRequest {
  id         String       @id @default(uuid())
  senderId   String
  receiverId String
  status     FriendStatus @default(PENDING)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  receiver   User         @relation("ReceivedFriendRequests", fields: [receiverId], references: [id], onDelete: Cascade)
  sender     User         @relation("SentFriendRequests", fields: [senderId], references: [id], onDelete: Cascade)

  @@unique([senderId, receiverId])
  @@index([receiverId])
  @@index([senderId])
}

model Conversation {
  id           String                    @id @default(uuid())
  type         ConversationType
  name         String?
  avatar       String?
  createdAt    DateTime                  @default(now())
  updatedAt    DateTime                  @updatedAt
  participants ConversationParticipant[]
  messages     Message[]

  @@index([type])
  @@index([updatedAt])
}

model ConversationParticipant {
  id             String          @id @default(uuid())
  userId         String
  conversationId String
  role           ParticipantRole @default(MEMBER)
  joinedAt       DateTime        @default(now())
  conversation   Conversation    @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, conversationId])
  @@index([conversationId])
  @@index([userId])
}

model Message {
  id             String            @id @default(uuid())
  conversationId String
  authorId       String
  message        String
  messageType    MessageType       @default(TEXT)
  fileUrl        String?
  fileName       String?
  fileMime       String?
  fileSize       Int?
  forwardedFrom  String?
  createdAt      DateTime          @default(now())
  author         User              @relation("MessageAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  conversation   Conversation      @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  reactions      MessageReaction[]
  receipts       MessageRead[]

  @@index([conversationId, createdAt])
  @@index([authorId])
}

model MessageReaction {
  id        String   @id @default(uuid())
  messageId String
  userId    String
  emoji     String
  createdAt DateTime @default(now())
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId, emoji])
  @@index([messageId])
  @@index([userId])
}

model MessageRead {
  id        String   @id @default(uuid())
  messageId String
  userId    String
  readAt    DateTime @default(now())
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId])
  @@index([messageId])
  @@index([userId])
}

model UserSettings {
  id                 String    @id @default(cuid())
  activeStatus       Boolean   @default(false)
  soundNotifications Boolean   @default(false)
  theme              ThemeType @default(LIGHT)
  userId             String    @unique
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])
}

enum device_type {
  DESKTOP
  MOBILE
  TABLET
  BOT
  POSTMAN
  UNKNOWN
}

enum FriendStatus {
  PENDING
  ACCEPTED
  REJECTED
  BLOCKED
}

enum ConversationType {
  DIRECT
  GROUP
}

enum ParticipantRole {
  MEMBER
  ADMIN
}

enum MessageType {
  TEXT
  FILE
  FORWARDED
}

enum ThemeType {
  LIGHT
  DARK
  SYSTEM
}
